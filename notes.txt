 use traits in 'user.php' to give the user friendship functionality
normally use Traits when U want to particular code or function common 
just like inhertance (Trait:base class, User:derived/OR Extends Friendable into User)
src={{Storage::url($user->profilel_image)}}
when U Load image from Storge Directory & it's not supposed to be accessed be the internet thats the hall point 
of storing images in storage so I can't accessed them with out giving permissoin
so run the command: php artisan storage:link
To make every thing in public dir accessable  

//////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
using package called noty to flash success notification as soon as action is complited
URL:ned.im/noty

run commands :
npm install noty
npm install  //install every thing that placed in package.json file
npm install gulp //so i can use laravel Elixis

**go to gulpfile.js where laravel elixis configured
U see it's compilied sass &app.js
U gonna remove sass U don't need it in this project
& add in resource\assets\js\components\bootstrap.js
	require('noty') cause in app.js require('./bootstrap')
as soon as this file compiled using 'webpack' its automatically added to "public/js/app.js"  
***run command : gulp  //to make a refresh copy of "public/js/app.js"






//////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
use Friendable; //in class User
use App\Traits\Friendable

**and the class will look like this 
namespace App\Traits;

traits Friendable 
{	
	public function hello()
	{	
		return "hello friends";
	}
}

**so when U wanna test this make A Route
Route::get('/hello',function(){
	return Auth::user()->hello; // call the methods directly from User Model
});

**when Make AddFriend Method in Friendable trait 
**we gonna return responce()->json('ok',200); //Because most likely we gonna use addfriend method 
			in vue.js  cause we dont want the user to refresh the page every time he addfriend
			so it's gonna make an ajax request to our server ,add afriend and send the response


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
to create facker users 
edit model factory if any changes happens to User table 
run : php artisan tinker
      factory('App\User',#num_of_fackUSers)->create()



//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
setting up laravel acho for integrating  realtime broadcasting into our app
***npm install laravel-echo --save


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
1st channel "pucher"
php by default has broadcasting system for broadcasting events
-but php  is not alanguage by default support realtime system unlike nodejs
--where you can create socet using socet.io to connect frontend &backend &there's open channel or open socet running

**so we gonna use laravel broadcasting service 
so laravel is gonning to broadcast notification or event
-once this broad cast is broadcasting we need a way to pickup
--this broadcasted event so we use "pucher"
    laravel broadcasting event <---(pickes) pucher (broadcast to)----> frontend
	"pucher"  main methodology is 'channels' 
	1-pucher pickes events from laravel broadcasting And verify it
	2-cheking in the frontend is there any one listening to specifc channel
	3-if there meaning there's an opening socket(the channel activating in the frontend U subscribed to that channel using vue.js ,jquery, javascript)
	4-"pucher" broadcast this event to frontend channel (so it gives us realtime experience)
*******bachend -----  "pucher" like Socet ------frontend*******
"pucher" has 3 different types of channel :
											public: leaves an open channel meaning any one can subscribe to that channel 
											, private: work little bit bifferent ,it receive notification from the backend 
															and the "pucher" authenticate to see if the authenticated user or the person who listening to that channel at that moment is authorithed U can see this in "BroadcastServiceProvider.php" 
											, present: the same as private channel except it's for multiple users knowledge presents between them all






//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////

Run : php artisan queue:table //to make job table
Queue system : make job table in the database to save works to be done to faster user operation in the App
			Ex:when U adding Afriend send notification first before sending notification to the User &broadcast event to pusher so save these jobs into Jobs table
		**Add (implements ShouldQueue) to every notification class you want to apply Queue System To it 
		**then Run : php artisan queue:work //to run those jobs in job table


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////


To Search in users in real time in our application
->we need to use a search service called ('Algolia')
1-> go first and setup laravel scout
Run :	*composer require laravel/scout
		*to update laravel framework : composer require laravel/framework:^5.4.0 --update-with-dependencies
		*Adding Laravel\Scout\ScoutServiceProvider::class Into App.php/config file
		*php artisan vendor:publish --provider="Laravel\Scout\ScoutServiceProvider"
		/*
			use Illuminate\Database\Eloquent\Model;
			class Post extends Model
			{
				use Searchable;
			}
		*/
		*composer require algolia/algoliasearch-client-php
		*php artisan scout:import "App\user"